/**
 * Hacky hacky hacky!
 */

// third-party
const Bluebird = require('bluebird');

module.exports = function (habemus, options) {

  const hAccountDialog = habemus.services.hAccountDialog;
  const config         = habemus.services.config;
  const hProject       = habemus.services.hProject;
  const hDev           = habemus.services.hDev;

  var authToken = hAccountDialog.getAuthToken();
  if (!authToken) { new Error('authToken is required'); }

  var headerElement = document.querySelector('#header');
  headerElement.style = [
    'display: flex',
    'flex-direction: row',
  ].join('; ');

  /* PUBLISHING */
  var publishButton = document.createElement('button');
  publishButton.innerHTML = 'publish';

  publishButton.addEventListener('click', function (e) {

    /**
     * Show the loading notification
     * and let it be manually removed
     */
    habemus.services.notification.loading.show({
      text: 'Publising a new version of "' + config.cloud.projectCode + '"',
      duration: Math.Infinity,
    });

    hDev.createProjectVersion(authToken, config.cloud.projectCode, {
      byProjectCode: true,
    })
    .then(function (workspace) {
      /**
       * Hide loading notification
       */
      habemus.services.notification.loading.hide();
      habemus.services.notification.success.show({
        text: 'Published version "' + workspace.projectVersionCode + '"',
        duration: 7000,
      });
    })
    .catch(function (err) {

      habemus.services.notification.loading.hide();
      habemus.services.notification.error.show({
        text: 'An unexpected error occurred: ' + err.name,
        duration: 7000, 
      });

      console.warn('create version error', err);
    });
  });

  headerElement.appendChild(publishButton);
  /* PUBLISHING */

  /* VERSIONING */
  Bluebird.all([
    hProject.getLatestVersion(authToken, config.cloud.projectCode, {
      byCode: true,
    }),
    hDev.get(authToken, config.cloud.projectCode, {
      byProjectCode: true
    })
  ])
  .then(function (results) {
    var projectLatestVersion = results[0];
    var workspace            = results[1];

    if (projectLatestVersion.code !== workspace.projectVersionCode) {

      var updateButton = document.createElement('button');
      updateButton.innerHTML = 'update';
      var updateBanner = document.createElement('div');
      updateBanner.innerHTML = 
        'workspace is not at last version: project at ' +
        projectLatestVersion.code + ' and workspace at ' + 
        workspace.projectVersionCode + '.';
      updateBanner.appendChild(updateButton);

      updateButton.addEventListener('click', function (e) {
        e.preventDefault();

        hDev.loadLatestVersion(authToken, config.cloud.projectCode, {
          byProjectCode: true,
        });
      });

      headerElement.appendChild(updateBanner);

    } else {
      console.log('up to date');
    }
  });
  /* VERSIONING */

  return headerElement;
};
