// native dependencies
const url = require('url');

// third-party dependencies
const Bluebird = require('bluebird');
const pathToRegExp = require('path-to-regexp');

// h-deps
const HAuthDialog = require('h-auth/client/ui/dialog');

const pkg = require('../../../package.json');

const DEFAULT_WORKSPACE_ROUTE = '/workspace/:workspaceId';

const H_AUTH_URI = process.env.H_AUTH_URI;
const H_DEV_CLOUD_URI = process.env.H_DEV_CLOUD_URI;
const WORKSPACE_ROUTE = process.env.WORKSPACE_ROUTE || DEFAULT_WORKSPACE_ROUTE;

const workspaceRegExp = pathToRegExp(WORKSPACE_ROUTE);

function parseProjectCodeFromLocation() {
  var locationString = window.location.toString();
  var parsedURL      = url.parse(locationString, true);

  var projectCode;

  // first attempt to get the url from the path
  var workspaceRouteMatch = parsedURL.path.match(workspaceRegExp);

  if (workspaceRouteMatch) {
    projectCode = workspaceRouteMatch[1];
  }

  // if no projectCode is found in the path,
  // get it from the query string
  projectCode = projectCode || parsedURL.query.projectCode;

  return projectCode;
}

function loadConfig() {
  console.log('load configs for browser environment');

  if (!H_AUTH_URI) {
    throw new Error('H_AUTH_URI env var MUST be set');
  }
  if (!H_DEV_CLOUD_URI) {
    throw new Error('H_DEV_CLOUD_URI env var MUST be set');
  }


  var locationString = window.location.toString();

  var projectCode = parseProjectCodeFromLocation();

  if (!projectCode) {
    throw new Error('could not parse projectCode');
  }

  // instantiate hAuth
  var authDialog = new HAuthDialog({
    serverURI: H_AUTH_URI,
    containerElement: document.body,
  });

  return authDialog.ensureUser()
    .then(function (user) {

      var authToken = authDialog.getAuthToken();

      if (!authToken) {
        throw new Error('could not retrieve authToken');
      }

      return {
        apiVersion: pkg.version,
        projectId: projectCode,
        projectName: projectCode,

        // cloud specific options
        cloud: {
          apiVersion: pkg.version,
          hDevCloudURI: H_DEV_CLOUD_URI,
          authToken: authToken,
          projectCode: projectCode,
        }
      };
    })
    .catch(function (err) {
      console.warn(err);
    });
}

module.exports = loadConfig;