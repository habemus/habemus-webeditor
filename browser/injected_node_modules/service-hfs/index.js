// third-party dependencies
const Bluebird   = require('bluebird');

const HDevClient = require('h-dev/client');

const PERMISSION_SCOPES = [
  'admin',
  'read',
  'update',
  'delete'
];

console.log(HDevClient);

module.exports = function (options) {

  if (!options.authToken) {
    throw new Error('authToken is required');
  }

  if (!options.projectId) {
    throw new Error('projectId is required');
  }

  var hdev = new HDevClient({
    apiVersion: options.apiVersion,
    serverURI: options.hDevServerURI
  });

  return hdev.connect(options.authToken, options.projectId, PERMISSION_SCOPES)
    .then(function () {
      return hdev;
    })
    .catch(function (err) {
      console.warn(err);

      return Bluebird.reject(err);
    });

  const hfs = {
    readDirectory: function (p) {
      console.log('readDirectory', p);
      return Bluebird.resolve([
        {
          basename: 'file',
          isDirectory: function () {
            return false;
          }
        },
        {
          basename: 'file-2',
          isDirectory: function () {
            return false;
          }
        },
        {
          basename: 'folder',
          isDirectory: function () {
            return true;
          }
        },
      ]);
    },

    remove: function (p) {
      console.log('remove', p);
      return Bluebird.resolve();
    },

    writeFile: function (p, contents) {
      console.log('writeFile', p, contents);
      return Bluebird.resolve();
    },

    move: function (src, dest) {
      console.log('move', src, dest);
      return Bluebird.resolve();
    },

    readFile: function (p, options) {
      console.log('readFile', p, options);
      return Bluebird.resolve(p + ' contents');
    },

    publish: function (eventName, eventData) {
      // console.log('event ', eventName, eventData);
      return Bluebird.resolve();
    },
    

    createDirectory: function (p) {
      console.log('createDirectory', p)
      return Bluebird.resolve();
    },


    createFile: function (p) {
      console.log('createFile', p);
      return Bluebird.resolve();
    },
  };

  return Bluebird.resolve(hfs);
}
