// native dependencies
const util = require('util');
const EventEmitter = require('events');

// third-party dependencies
// grab the HFs constructor
const HFs      = require('h-fs').HFs;
const chokidar = require('chokidar');
const Bluebird = require('bluebird');

/**
 * ElectronHDevAPI constructor
 * 
 * In the electron based version,
 * we ignore the hfs emitted events and instead use
 * chokidar watcher emitted events instead,
 * as modifications to the filesystem might be
 * made by multiple external agents.
 */
function ElectronHDevAPI(rootPath) {

  // initialize HFs with the events muted, as fs events will be dealt
  // with by hte chokidar watcher
  HFs.call(this, rootPath, { suppressFsEvents: true });
  
  /**
   * Initialize a chokidar watcher
   * and setup listeners to publish notifications.
   */
  this.watcher = chokidar.watch([], {
    // shamelessly copied from Ms Visual Studio Code
    // https://github.com/Microsoft/vscode/blob/0d658f2c0308c770b90df5a73816f0c045817689/src/vs/workbench/services/files/node/watcher/unix/chokidarWatcherService.ts
    
    ignoreInitial: true,
    ignorePermissionErrors: true,
    followSymlinks: true, // this is the default of chokidar and supports file events through symlinks
    interval: 1000, // while not used in normal cases, if any error causes chokidar to fallback to polling, increase its intervals
    binaryInterval: 1000,

    depth: 0,

    cwd: rootPath,
  });

  function _emitEvent(eventName, path) {
    console.log('emit ', eventName, path);
    this.emit(eventName, {
      path: '/' + path,
    });
  }
  
  // files
  this.watcher
    .on('add', _emitEvent.bind(this, 'file-created'))
    .on('unlink', _emitEvent.bind(this, 'file-removed'))
    .on('change', _emitEvent.bind(this, 'file-updated'));

  // directories
  this.watcher
    .on('addDir', _emitEvent.bind(this, 'directory-created'))
    .on('unlinkDir', _emitEvent.bind(this, 'directory-removed'));
}
util.inherits(ElectronHDevAPI, HFs);

/**
 * In the electron implementation of h-dev, the publish method
 * is still undefined.
 */
ElectronHDevAPI.prototype.publish = function (eventName, eventData) {
  
};

/**
 * In the electron implementation of h-dev,
 * the we subscribe is simply a proxy method to the eventEmitter instance's
 * `on` method.
 *
 * At cloud h-dev, subscribe actually communicates the server it requires
 * subscription to some events.
 * 
 * @param  {String} eventName
 * @param  {Function} eventHandler
 */
ElectronHDevAPI.prototype.subscribe = function (eventName, eventHandler) {
  this.on(eventName, eventHandler);
};

ElectronHDevAPI.prototype.startWatching = function (path) {

  var fullPath;

  if (typeof path !== 'string' || path === '' || path === '/') {
    fullPath = this.root.value();
  } else {
    fullPath = this.root.prependTo(path);
  }

  // the watcher deals with system wide absolute paths,
  // thus we must convert the path to an absolute path
  this.watcher.add(fullPath);

  return Bluebird.resolve();
};

ElectronHDevAPI.prototype.stopWatching = function (path) {

  var fullPath;

  if (typeof path !== 'string' || path === '' || path === '/') {
    fullPath = this.root.value();
  } else {
    fullPath = this.root.prependTo(path);
  }

  // the watcher deals with system wide absolute paths,
  // thus we must convert the path to an absolute path
  this.watcher.unwatch(fullPath);

  return Bluebird.resolve();
};

module.exports = ElectronHDevAPI;
