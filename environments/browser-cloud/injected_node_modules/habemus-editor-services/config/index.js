// native dependencies
const url = require('url');

// third-party dependencies
const Bluebird = require('bluebird');
const pathToRegExp = require('path-to-regexp');

// h-deps
const HAccountDialog = require('h-account-client/browser/ui/dialog');

// injected modules
const habemusEditorUrls = require('habemus-editor-urls');

const pkg = require('../../../../../package.json');

/**
 * Demo mode
 * TODO: deprecate demo mode on launch
 */
const DEMO_MODE_ENABLED = process.env.DEMO_MODE === 'enabled';
function _loadDemoAccount(habemus, options) {
  console.log('loading account from demo configs');
  var parsedURL = url.parse(window.location.toString(), true);
  var demoData = parsedURL.query.demo;
  
  delete parsedURL.search;
  delete parsedURL.query.demo;
  
  // remove the demo data from the url
  window.history.replaceState(
    'habemus-editor',
    'Habemus',
    url.format(parsedURL)
  );
  
  return Bluebird.try(function () {
    return JSON.parse(atob(demoData));
  })
  .then(function (demoCredentials) {
    return habemus.services.hAccountDialog.hAccountClient.logIn(
      demoCredentials.username,
      demoCredentials.password
    );
  });
}

function loadConfig(habemus, options) {
  console.log('load configs for `browser-cloud` environment');

  var locationString = window.location.toString();

  // get project code from the url
  var projectCode = habemusEditorUrls.parse.uiWorkspace(locationString).projectCode;
  if (!projectCode) {
    var err = new Error('could not parse projectCode');

    // error is equivalent to `NotFound`
    err.name = 'NotFound';

    throw err;
  }
  
  /**
   * Promise for an account with email verified
   */
  var accountPromise;
  
  /**
   * DEMO MODE
   */
  if (DEMO_MODE_ENABLED && url.parse(locationString, true).query.demo) {
    accountPromise = _loadDemoAccount(habemus, options);
  } else {
    accountPromise = habemus.services.hAccountDialog.ensureAccount({
      ensureEmailVerified: true,
    });
  }
  
  return accountPromise.then(function (account) {
    
    return {
      apiVersion: pkg.version,
      projectId: projectCode,
      projectName: projectCode,

      // cloud specific options
      cloud: {
        apiVersion: pkg.version,
        hWorkspaceURI: process.env.H_WORKSPACE_URI,
        uiDashboardURI: process.env.UI_DASHBOARD_URI,
        projectCode: projectCode,
      },

      language: require('./language')(account, habemus, options),
      
      /**
       * browser-cloud only projectMenu options
       */
      projectMenuOptions: require('./project-menu-options')(account, habemus, options),
    };
  });
}

module.exports = loadConfig;
