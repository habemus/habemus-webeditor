/**
 * Hacky hacky hacky!
 */

// third-party
const Bluebird = require('bluebird');

// injected modules
const habemusEditorURLs = require('habemus-editor-urls');

module.exports = function (habemus, options) {

  const hAccountDialog = habemus.services.hAccountDialog;
  const config         = habemus.services.config;
  const hProject       = habemus.services.hProject;
  const hDev           = habemus.services.hDev;

  var authToken = hAccountDialog.getAuthToken();
  if (!authToken) { new Error('authToken is required'); }

  var headerElement = document.querySelector('#header');
  headerElement.style = [
    'display: flex',
    'flex-direction: row',
  ].join('; ');


  /* PUBLISHING */
  var publishButton = document.createElement('button');
  publishButton.innerHTML = habemus.services.language.t('dev-header.publish');

  publishButton.addEventListener('click', function (e) {

    /**
     * Show the loading notification
     * and let it be manually removed
     */
    habemus.services.notification.loading.show({
      text: 'Publising a new version of "' + config.cloud.projectCode + '"',
      duration: Math.Infinity,
    });

    hDev.createProjectVersion(authToken, config.cloud.projectCode, {
      byProjectCode: true,
    })
    .then(function (workspace) {
      /**
       * Hide loading notification
       */
      habemus.services.notification.loading.hide();
      habemus.services.notification.success.show({
        text: 'Published version "' + workspace.projectVersionCode + '"',
        duration: 7000,
      });
    })
    .catch(function (err) {

      habemus.services.notification.loading.hide();
      habemus.services.notification.error.show({
        text: 'An unexpected error occurred: ' + err.name,
        duration: 7000, 
      });

      console.warn('create version error', err);
    });
  });

  headerElement.appendChild(publishButton);
  /* PUBLISHING */



  /* GO TO PRODUCTION */
  var productionAnchor = document.createElement('a');
  productionAnchor.setAttribute(
    'href',
    habemusEditorURLs.format.websiteHabemusDomain(config.cloud.projectCode)
  );
  productionAnchor.setAttribute('target', '_blank');
  productionAnchor.innerHTML = 'view production';

  headerElement.appendChild(productionAnchor);
  /* GO TO PRODUCTION */


  /* UPDATING */
  Bluebird.all([
    hProject.getLatestVersion(authToken, config.cloud.projectCode, {
      byCode: true,
    }),
    hDev.get(authToken, config.cloud.projectCode, {
      byProjectCode: true
    })
  ])
  .then(function (results) {
    var projectLatestVersion = results[0];
    var workspace            = results[1];

    if (projectLatestVersion.code !== workspace.projectVersionCode) {

      var updateButton = document.createElement('button');
      updateButton.innerHTML = 'update';
      var updateBanner = document.createElement('div');
      updateBanner.innerHTML = 
        'workspace is not at last version: project at ' +
        projectLatestVersion.code + ' and workspace at ' + 
        workspace.projectVersionCode + '.';
      updateBanner.appendChild(updateButton);

      updateButton.addEventListener('click', function (e) {
        e.preventDefault();

        hDev.loadLatestVersion(authToken, config.cloud.projectCode, {
          byProjectCode: true,
        });
      });

      headerElement.appendChild(updateBanner);

    } else {
      console.log('up to date');
    }
  });
  /* UPDATING */

  /* LANGUAGES */
  var languageSelector = document.createElement('select');
  var selectedLanguage = habemus.services.language.selected;
  languageSelector.innerHTML = habemus.services.language.available.reduce(function (html, lang) {

    if (selectedLanguage === lang.key) {
      return html + '<option selected value="' + lang.key + '">' + lang.label + '</option>';
    } else {
      return html + '<option value="' + lang.key + '">' + lang.label + '</option>';
    }

  }, '');
  languageSelector.addEventListener('change', function (e) {
    var value = languageSelector.value;

    /**
     * Save the language configuration
     */
    habemus.services.hAccountDialog.getCurrentAccount()
      .then(function (account) {
        return habemus.services.hAccountDialog.hAccountClient.updateApplicationConfig(
          hAccountDialog.getAuthToken(),
          account.username,
          'workspace',
          {
            language: value,
          }
        );
      });

    /**
     * Reset application language
     */
    habemus.services.language.resetLanguage(value)
      .catch(function (err) {
        // go back to last value
        languageSelector.value = habemus.services.language.selected;

        // the error only happens whenever the user cancels the prompt.
        // The prompt is used to prevent the user from refreshing the 
        // page while there are unsaved changes, but the
        // language setting might be considered done anyway.
      });
  });

  headerElement.appendChild(languageSelector);
  /* LANGUAGES */

  return headerElement;
};
