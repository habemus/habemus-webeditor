// native
const url = require('url');

// third-party
const Bluebird = require('bluebird');

module.exports = function (habemus, options) {

  var httpService = {};

  httpService.download = function (sourceURL, dest) {

    if (!sourceURL) {
      throw new Error('sourceURL is required');
    }

    if (!dest) {
      var urlPath = url.parse(sourceURL).path;

      var urlPathSplit = urlPath.split('/');
      dest = urlPathSplit[urlPathSplit.length - 1];
    }

    if (typeof window.fetch !== 'function') {
      habemus.services.dialogs.alert('Unfortunately this browser does not support the download API :(');
      return;
    }
          
    return Bluebird.resolve(window.fetch(sourceURL)).then(function (response) {
      if (response.status === 200 || response.status === 0) {
        return Bluebird.resolve(response.arrayBuffer())
      } else {
        return Bluebird.reject(new Error(response.statusText))
      }
    })
    .then(function (fileContents) {

      return habemus.services.hDev.createFile(dest, fileContents);



      // if (projectName) {
      //   var zip = new JSZip();
      //   zip.load(contents);

      //   projectName = slug(projectName);

      //   return habemus.createProject(projectName)
      //     .then(function () {
      //       var newProjectRoot = path.join(habemus.get('projectsPath'), projectName);

      //       var writePromises = [];

      //       for (filepath in zip.files) {
      //         if (zip.files.hasOwnProperty(filepath)) {

      //           var file = zip.files[filepath];

      //           if (file.dir) {
      //             // do nothing
      //             // console.log('found dir entry in zip file')
      //           } else if (/^__MACOSX/.test(filepath)) {
      //             // skip
      //           } else {
      //             var fileContents = zip.files[filepath].asArrayBuffer();

      //             // write the file
      //             var writePromise = habemus.services.hfs.writeFilep(path.join(newProjectRoot, filepath), fileContents)
      //               .then(function () {

      //                 console.log('written!');
      //               }, function (err) {
      //                 console.warn(err);
      //               });

      //             // add the promise to the array of promises
      //             writePromises.push(writePromise);
      //           }
      //         }
      //       }

      //       return Q.all(writePromises);
      //     })
      //     .then(function () {
      //       // close
      //       templateDialog.close();
      //       return habemus.openProject(projectName);
      //     })
      // }

    });
  };

  return httpService;
};
