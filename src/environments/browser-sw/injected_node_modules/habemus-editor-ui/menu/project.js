// third-party
const Bluebird = require('bluebird');
const fileSaver = require('file-saver');

// TODO: study how to merge with language configs
const AVAILABLE_LANGUAGES = [
  {
    label: 'English (US)',
    key: 'en-US',
  },
  {
    label: 'PortuguÃªs (BR)',
    key: 'pt-BR',
  },
];

module.exports = function (habemus, options) {

  /**
   * Shortcut for translate fn
   */
  const _t = habemus.services.language.t;

  habemus.ui.projectMenu.addOptions([
    /**
     * TODO:
     * It might make sense to put the upload from zip logic within
     * happiness-tree
     */
    // {
    //   group: 'sw:fs',
    //   label: 'upload and unzip',
    //   type: 'input:file',
    //   multiple: false,
    //   accept: '.zip',
    //   callback: function (data) {

    //     if (!data.files) {
    //       return;
    //     }

    //     var file = data.files[0];

    //     habemus.services.dialogs.prompt('Path to which unzip', {
    //       submit: 'ok',
    //     })
    //     .then(function (unzipPath) {

    //       /**
    //        * Show the loading notification
    //        * and let it be manually removed
    //        */
    //       habemus.services.notification.loading.show({
    //         text: 'Uploading and unzipping',
    //         duration: Math.Infinity,
    //       });

    //       return habemus.services.zip.unzip(data.files[0], unzipPath);
    //     })
    //     .then(function () {
    //       habemus.services.notification.loading.hide();
    //       habemus.services.notification.success.show({
    //         text: 'Upload and unzip finished',
    //         duration: 3000,
    //       });
    //     })
    //     .catch(function (err) {
    //       if (err.canceled) {
    //         console.log('user canceled');
    //         return;
    //       }

    //       habemus.services.notification.loading.hide();
    //       habemus.services.dialogs.alert('Error uploading zip');
    //     });
    //   }
    // },

    /**
     * Downloads a file from a public url
     * into the project
     */
    // {
    //   group: 'sw:fs',
    //   label: 'download file into project',
    //   callback: function (data) {

    //     var _sourceURL;

    //     // TODO: implement inquirer
    //     // retrieve some data
    //     return habemus.services.dialogs.prompt('Download from URL:').then(function (sourceURL) {
    //       if (!sourceURL) {
    //         return Bluebird.reject(new Error('sourceURL is required'));
    //       }

    //       _sourceURL = sourceURL;

    //       var sourceURLSplit = sourceURL.split('/');

    //       return habemus.services.dialogs.prompt('Save as', {
    //         submit: 'ok',
    //         defaultValue: sourceURLSplit[sourceURLSplit.length - 1],
    //       });
    //     })
    //     .then(function (filename) {
    //       if (!filename) {
    //         return Bluebird.reject(new Error('filename is required'));
    //       }

    //       *
    //        * Show the loading notification
    //        * and let it be manually removed
           
    //       habemus.services.notification.loading.show({
    //         text: 'Downloading',
    //         duration: Math.Infinity,
    //       });

    //       return habemus.services.http.download(_sourceURL, filename);
    //     })
    //     .then(function () {
    //       habemus.services.notification.loading.hide();
    //       habemus.services.notification.success.show({
    //         text: 'Download finished',
    //         duration: 3000,
    //       });
    //     })
    //     .catch(function (err) {
    //       if (err.canceled) {
    //         console.log('user canceled');
    //         return;
    //       }

    //       habemus.services.notification.loading.hide();
    //       habemus.services.dialogs.alert('Error downloading file into project');
    //     });
    //   },
    // },

    /**
     * Clears the whole filesystem.
     */
    // {
    //   group: 'sw:fs',
    //   label: 'clear filesystem',
    //   callback: function (data) {

    //     return habemus.services.dialogs.confirm('This action cannot be undoned. Are you sure?', {
    //       ok: 'yes',
    //     })
    //     .then(function () {
    //       return habemus.services.hDev.readDirectory('/');
    //     })
    //     .then(function (rootEntries) {
    //       return Bluebird.all(rootEntries.map(function (entry) {
    //         return habemus.services.hDev.remove(entry.path);
    //       }));
    //     })
    //     .catch(function (err) {
    //       // user cancelled
    //     });

    //   },
    // },

    {
      group: 'sw:fs',
      label: _t('project.download'),
      callback: function (data) {

        var downloadName = 'project.zip';
        
        return habemus.services.zip.zip('/').then(function (zipFile) {
          fileSaver.saveAs(zipFile, downloadName);
        })
        .catch(function (err) {
          if (err.canceled) {
            // user canceled
            return;
          }

          habemus.services.dialogs.alert('Error downloading zip file');
          console.warn(err);
        });
      },
    },

    {
      group: 'sw:fs',
      label: _t('project.new'),
      callback: function (data) {

        return habemus.services.hDev.readDirectory('/').then(function (rootEntries) {
          if (rootEntries.length > 0) {
            // project is not empty.
            // ask user to confirm deleting all files
            return habemus.services.dialogs.confirm('Downloading a new project will require deleting all files of the current project. Are sure?', {
              confirm: 'replace all files',
              cancel: 'cancel',
            });
          }
        })
        .then(function () {

          return habemus.services.hDev.readDirectory('/').then(function (rootEntries) {
            return Bluebird.all(rootEntries.map(function (entry) {
              return habemus.services.hDev.remove(entry.path);
            }));
          });
        })
        .then(function () {
          // let the project creation prompting so its job
          window.location.reload();
        })
        // .then(function () {
        //   return habemus.ui.projectDialogs.new.prompt({
        //     cancellable: true,
        //   })
        //   .then(function (res) {
        //     switch (res.type) {
        //       case 'file-input':
        //         return habemus.services.zip.unzip(res.value.files[0], '/');
        //         break;
        //       case 'directory-input':
        //         // UNSUPPORTED FOR NOW
        //         break;
        //       case 'drop-event':
        //         // UNSUPPORTED FOR NOW
        //         break;
        //     }
        //   });
        // })
        .catch(function (err) {
          if (err.canceled) {
            // user canceled, ignore
            return;
          }

          habemus.services.dialogs.alert('An unknown error happened, please retry');
          console.warn(err);
          throw err;
        });
      }
    },

    {
      group: 'sw:fs',
      label: _t('project.publish'),
      callback: function (data) {
        return habemus.ui.projectDialogs.publish.open();
      }
    },

    {
      group: 'config',
      label: _t('language.languages'),
      type: 'submenu',
      options: AVAILABLE_LANGUAGES.map(function (language) {
        return {
          label: language.label,
          callback: function (data) {
            data.menuElement.close();
            
            /**
             * Reset application language
             */
            habemus.services.language.resetLanguage(language.key)
              .catch(function (err) {
                // the error only happens whenever the user cancels the prompt.
                // The prompt is used to prevent the user from refreshing the 
                // page while there are unsaved changes, but the
                // language setting might be considered done anyway.
              });
          }
        }
      }),
    },
  ]);

};
