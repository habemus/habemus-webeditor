// third-party
const Bluebird = require('bluebird');


module.exports = function (habemus, options) {

  // create an instance of the sw installation dialog
  var swInstallationDialog = document.createElement('habemus-sw-installation-dialog');
  document.body.appendChild(swInstallationDialog);
  Polymer.dom.flush();
  // enable translations
  // language service is not available at this point,
  // thus proxy access to it through a function
  swInstallationDialog.set('translate', function () {
    return habemus.services.criticalLanguage.t.apply(
      habemus.services.criticalLanguage,
      Array.from(arguments)
    );
  });

  // open installation dialog only if after 300ms the service worker is not
  // yet ready, which indicates that the installation process is under way
  setTimeout(function () {
    if (!navigator.serviceWorker.controller) {
      swInstallationDialog.open();
    }
  }, 300);

  if (!navigator.serviceWorker) {
    // not available in this browser!
    habemus.services.dialogs.alert(habemus.services.criticalLanguage.t('browser-sw.service-workers-unsupported'));

    var error = new Error('serviceWorker not supported in browser');
    error.name = 'Missing Service Workers';

    throw error;
  }

  // sw registration
  return navigator.serviceWorker.register('/service-worker.js', { scope: '/' })
    // Wait until the service worker is active.
    .then(function(registration) {
      console.log('ServiceWorker registration successful with scope: ', registration.scope);

      return navigator.serviceWorker.ready;
    })
    .then(function () {

      // service worker has been successfully installed
      swInstallationDialog.set('mode', 'installed');

      if (navigator.serviceWorker.controller) {
        console.log('The service worker is currently handling network operations.');

        // simply close dialog
        swInstallationDialog.close();

        return navigator.serviceWorker;
      } else {
        console.log('Please reload this page to allow the service worker to handle network operations.');
        // habemus.services.dialogs.alert('Service worker registered successfully, but the browser MUST be refreshed.');

        // ensure swInstallationDialog is open
        if (!swInstallationDialog.get('opened')) {
          swInstallationDialog.open();
        }
        // wait for user to click on refresh
        // return never resolving promise
        return new Bluebird(function () {});
      }
    })
    .catch(function(error) {
      // Something went wrong during registration. The service-worker.js file
      // might be unavailable or contain a syntax error.
      console.warn('sw error', error);

      habemus.services.dialogs.alert('An error happened registering the service worker! :(');
    });
};
