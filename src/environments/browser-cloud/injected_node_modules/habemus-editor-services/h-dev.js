// third-party dependencies
const Bluebird = require('bluebird');

// h-deps
const HProjectClient   = require('habemus-project-client');
const HWorkspaceClient = require('habemus-workspace-client/public/authenticated');

// injected modules
const habemusEditorUrls = require('habemus-editor-urls');

const PERMISSION_SCOPES = [
  'admin',
  'read',
  'update',
  'delete'
];

function _wait(ms) {
  return new Bluebird(function (resolve) {
    setTimeout(resolve, ms);
  });
}

module.exports = function (habemus, options) {

  var config = habemus.services.config;

  var apiVersion = config.cloud.apiVersion;
  var hWorkspaceURI = config.cloud.hWorkspaceURI;

  var projectCode = config.cloud.projectCode;

  if (!apiVersion) {
    throw new Error('cloud.apiVersion is required');
  }

  if (!hWorkspaceURI) {
    throw new Error('cloud.hWorkspaceURI is required');
  }

  if (!projectCode) {
    throw new Error('cloud.projectCode is required');
  }
  
  /**
   * HWorkspace client.
   * Exposes the h-dev api through websockets that connect to the 
   * workspace server.
   * 
   * @type {HWorkspaceClient}
   */
  var hWorkspace = new HWorkspaceClient({
    apiVersion: apiVersion,
    serverURI: hWorkspaceURI,
  });

  var authToken = habemus.services.hAccountDialog.getAuthToken();

  if (!authToken) {
    throw new Error('invalid authToken');
  }

  return hWorkspace.get(
    authToken,
    projectCode,
    {
      byProjectCode: true
    }
  )
  .then(function (workspace) {
    /**
     * The root url for the project's preview
     * @type {String}
     */
    hWorkspace.projectRootURL =
      habemusEditorUrls.format.workspacePreview(projectCode);

    /**
     * Whenever the workspace's room is destroyed,
     * we should reload the editor so that a new room is set up.
     */
    hWorkspace.on('room-destroyed', function () {

      Bluebird.race([
        _wait(5000),
        habemus.services.dialogs.alert(
          'This workspace was reset on habemus\' servers ' + 
          'It must be reloaded'
        )
      ])
      .then(function () {
        // reload the webpage
        window.location.reload();
      });
    });

    return hWorkspace.connect(authToken, projectCode);
  })
  .then(function () {
    // h-workspace exposes the hDev API
    return hWorkspace;
  });
}
