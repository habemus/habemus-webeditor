// injected modules
const habemusEditorURLs = require('habemus-editor-urls');

// TODO: study how to merge with language configs
const AVAILABLE_LANGUAGES = [
  {
    label: 'English (US)',
    key: 'en-US',
  },
  {
    label: 'Português (BR)',
    key: 'pt-BR',
  },
  // {
  //   label: '中文 (简体)',
  //   key: 'zn-CH',
  // }
];

/**
 * Translations:
 * project-menu.publish-new-version
 * project-menu.view-in-production
 * project-menu.view-my-projects
 * project-menu.languages
 * project-menu.logout
 */

module.exports = function (account, habemus, options) {

  return [
    {
      group: 'project-management',
      label: function () {
        return habemus.services.language.t(
          'project-menu.publish-new-version'
        );
      },
      callback: function (data) {
        data.menuElement.close();
        var context = data.context;
        
        var config = habemus.services.config;
        var hDev   = habemus.services.hDev;
        var authToken = habemus.services.hAccountDialog.getAuthToken();
        
        /**
         * Show the loading notification
         * and let it be manually removed
         */
        habemus.services.notification.loading.show({
          text: 'Publising a new version of "' + config.cloud.projectCode + '"',
          duration: Math.Infinity,
        });
    
        return hDev.createProjectVersion(
          authToken,
          config.cloud.projectCode, {
            byProjectCode: true,
          }
        )
        .then(function (workspace) {
          /**
           * Hide loading notification
           */
          habemus.services.notification.loading.hide();
          habemus.services.notification.success.show({
            text: 'Published version "' + workspace.projectVersionCode + '"',
            duration: 7000,
          });
        })
        .catch(function (err) {
    
          habemus.services.notification.loading.hide();
          habemus.services.notification.error.show({
            text: 'An unexpected error occurred: ' + err.name,
            duration: 7000, 
          });
    
          console.warn('create version error', err);
        });
      }
    },
    
    {
      group: 'project-management',
      label: function () {
        return habemus.services.language.t(
          'project-menu.view-in-production'
        );
      },
      type: 'url',
      url: function (data) {
        
        var config = habemus.services.config;
        
        return habemusEditorURLs.format.websiteHabemusDomain(
          config.cloud.projectCode
        );
      },
      target: '_blank',
      callback: function (data) {
        data.menuElement.close();
      },
    },
    {
      group: 'config',
      type: 'url',
      label: function () {
        return habemus.services.language.t(
          'project-menu.view-my-projects'
        );
      },
      url: 'https://habemus.io/dashboard',
    },
    {
      group: 'config',
      label: function () {
        return habemus.services.language.t(
          'project-menu.languages'
        );
      },
      type: 'submenu',
      options: AVAILABLE_LANGUAGES.map((language) => {
        return {
          label: language.label,
          callback: function (data) {
            data.menuElement.close();
            
            var hAccountDialog = habemus.services.hAccountDialog;
            
            /**
             * Save the language configuration
             */
            hAccountDialog.getCurrentAccount()
              .then(function (account) {
                return hAccountDialog.hAccountClient.updateApplicationConfig(
                  hAccountDialog.getAuthToken(),
                  account.username,
                  'workspace',
                  {
                    language: language.key,
                  }
                );
              });
        
            /**
             * Reset application language
             */
            habemus.services.language.resetLanguage(language.key)
              .catch(function (err) {
                // the error only happens whenever the user cancels the prompt.
                // The prompt is used to prevent the user from refreshing the 
                // page while there are unsaved changes, but the
                // language setting might be considered done anyway.
              });
          }
        }
      }),
    },
    {
      group: 'config',
      label: function () {
        return habemus.services.language.t(
          'project-menu.logout'
        );
      },
      callback: function (data) {
        data.menuElement.close();
        
        habemus.services.dialogs.confirm('All unsaved changes will be lost. Are you sure you want to logout?', {
          confirm: 'logout',
        })
        .then(function () {
          return habemus.services.hAccountDialog.logOut();
        })
        .then(function () {
          // TODO: replace with env var.
          window.location.assign('https://habem.us');
        })
        .catch(function (err) {
          if (err.canceled) {
            // user canceled
          } else {
            console.warn('logout error');
            console.warn(err);
          }
        });
      },
    },
    {
      group: 'project-management',
      label: function () {
        return '*update workspace to \'' + habemus.services.config.cloud.projectLatestVersion.code + '\''
      },
      hide: function () {
        return habemus.services.config.cloud.workspace.projectVersionCode === 
               habemus.services.config.cloud.projectLatestVersion.code;
      },
      callback: function (data) {
        data.menuElement.close();
        
        return habemus.services.dialogs.confirm('All unpublished modifications will be lost. Are you sure you want to proceed?', {
          ok: 'update',
        })
        .then(function () {
          
          var latestVersionCode = habemus.services.config.cloud.projectLatestVersion.code;
          
          habemus.services.notification.loading.show({
            text: 'updating workspace to version ' + latestVersionCode,
            duration: Math.Infinity,
          });
          
          return habemus.services.hDev.loadLatestVersion(
            habemus.services.hAccountDialog.getAuthToken(),
            habemus.services.config.cloud.projectCode,
            {
              byProjectCode: true
            }
          )
        })
        .then(function () {
          habemus.services.notification.loading.hide();
        })
        .catch(function (err) {
          habemus.services.notification.loading.hide();
          
          if (err.canceled) {
            // user canceled
            return;
          }
          
          console.warn(err);
          habemus.services.notification.error.show({
            message: 'Error updating workspace: ' + err.name,
            duration: 5000,
          })
        });
        
      }
    }
  ]
};
