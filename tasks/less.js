var path = require('path');

var config  = require('./config');

// Message to be prepended to all -styles.html files generated via less
var styleModuleMessage = [
  '<!--',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | This file was generated by LESS.                   |',
  ' | All modifications to it will be lost, mercilessly! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  '-->\n\n',
].join('\n');

// Message to be prepended to all .css files generated via less
var cssMessage = [
  '/*----------------------------------------------------',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | This file was generated by LESS.                   |',
  ' | All modifications to it will be lost, mercilessly! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' | !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! |',
  ' -----------------------------------------------------*/\n\n',
].join('\n');

var autoprefixerOptions = {
  browsers: [
    'ie >= 10',
    'ie_mob >= 10',
    'ff >= 30',
    'chrome >= 34',
    'safari >= 7',
    'opera >= 23',
    'ios >= 7',
    'android >= 4.4',
    'bb >= 10'
  ],
  cascade: false,
};

var lessErrorNotifyOptions = {
  title: 'Less compiling error',
  message: '<%= error.message %>',
  open: 'file:///<%= error.filename %>',
  sound: 'Glass',
  // Basso, Blow, Bottle, Frog, Funk, Glass, Hero,
  // Morse, Ping, Pop, Purr, Sosumi, Submarine, Tink
  icon: path.join(config.root, 'logo.png'),
};

module.exports = function (gulp, $) {

  /**
   * Compile the less for elements
   * At the end, generate an ".html" file with the styles
   * to be included
   */
  gulp.task('less:elements', function () {
    var elementsDir     = config.srcDir + '/elements';
    var elementsLessDir = elementsDir + '/**/*.less';

    return gulp.src(elementsLessDir)
      //.pipe($.changed(elementsDir, { extension: '.html' }))
      .pipe($.less())
      .on('error', $.notify.onError(lessErrorNotifyOptions))
      .pipe($.autoprefixer(autoprefixerOptions))
      // transform css into dom-module
      .pipe($.polymerizeCss({
        styleId: function (file) {
          var basename = path.basename(file.path, '.css');

          return basename + '-styles';
        }
      }))
      .pipe($.rename(function (path) {
        path.basename += '-styles';
        path.extname = '.html';
      }))
      .pipe($.header(styleModuleMessage))
      .pipe(gulp.dest(elementsDir))
      .pipe($.size({
        title: 'less',
        showFiles: true
      }));

  });

  /**
   * Compile the less for the application
   * At the end, generate a ".css" file
   */
  gulp.task('less:application', function () {

    return gulp.src(config.srcDir + '/index.less', { base: config.srcDir })
      .pipe($.changed(config.srcDir, { extension: '.css' }))
      .pipe($.less({
        paths: [config.srcDir + '/less/**/*.less']
      }))
      .on('error', $.notify.onError(lessErrorNotifyOptions))
      .pipe($.autoprefixer(autoprefixerOptions))
      .pipe($.header(cssMessage))
      .pipe($.rename('index.bundle.css'))
      .pipe(gulp.dest(config.srcDir))
      .pipe($.size({
        title: 'less',
        showFiles: true
      }));
  });

  /**
   * Task for less.
   */
  gulp.task('less', ['less:elements', 'less:application']);
};
