// third-party
const Bluebird = require('bluebird');
const fileSaver = require('file-saver');

module.exports = function (habemus, options) {

  habemus.ui.projectMenu.addOptions([
    /**
     * TODO:
     * It might make sense to put the upload from zip logic within
     * happiness-tree
     */
    // {
    //   group: 'sw:fs',
    //   label: 'upload and unzip',
    //   type: 'input:file',
    //   multiple: false,
    //   accept: '.zip',
    //   callback: function (data) {

    //     if (!data.files) {
    //       return;
    //     }

    //     var file = data.files[0];

    //     habemus.services.dialogs.prompt('Path to which unzip', {
    //       submit: 'ok',
    //     })
    //     .then(function (unzipPath) {

    //       /**
    //        * Show the loading notification
    //        * and let it be manually removed
    //        */
    //       habemus.services.notification.loading.show({
    //         text: 'Uploading and unzipping',
    //         duration: Math.Infinity,
    //       });

    //       return habemus.services.zip.unzip(data.files[0], unzipPath);
    //     })
    //     .then(function () {
    //       habemus.services.notification.loading.hide();
    //       habemus.services.notification.success.show({
    //         text: 'Upload and unzip finished',
    //         duration: 3000,
    //       });
    //     })
    //     .catch(function (err) {
    //       if (err.canceled) {
    //         console.log('user canceled');
    //         return;
    //       }

    //       habemus.services.notification.loading.hide();
    //       habemus.services.dialogs.alert('Error uploading zip');
    //     });
    //   }
    // },

    /**
     * Downloads a file from a public url
     * into the project
     */
    // {
    //   group: 'sw:fs',
    //   label: 'download file into project',
    //   callback: function (data) {

    //     var _sourceURL;

    //     // TODO: implement inquirer
    //     // retrieve some data
    //     return habemus.services.dialogs.prompt('Download from URL:').then(function (sourceURL) {
    //       if (!sourceURL) {
    //         return Bluebird.reject(new Error('sourceURL is required'));
    //       }

    //       _sourceURL = sourceURL;

    //       var sourceURLSplit = sourceURL.split('/');

    //       return habemus.services.dialogs.prompt('Save as', {
    //         submit: 'ok',
    //         defaultValue: sourceURLSplit[sourceURLSplit.length - 1],
    //       });
    //     })
    //     .then(function (filename) {
    //       if (!filename) {
    //         return Bluebird.reject(new Error('filename is required'));
    //       }

    //       *
    //        * Show the loading notification
    //        * and let it be manually removed
           
    //       habemus.services.notification.loading.show({
    //         text: 'Downloading',
    //         duration: Math.Infinity,
    //       });

    //       return habemus.services.http.download(_sourceURL, filename);
    //     })
    //     .then(function () {
    //       habemus.services.notification.loading.hide();
    //       habemus.services.notification.success.show({
    //         text: 'Download finished',
    //         duration: 3000,
    //       });
    //     })
    //     .catch(function (err) {
    //       if (err.canceled) {
    //         console.log('user canceled');
    //         return;
    //       }

    //       habemus.services.notification.loading.hide();
    //       habemus.services.dialogs.alert('Error downloading file into project');
    //     });
    //   },
    // },

    /**
     * Clears the whole filesystem.
     */
    {
      group: 'sw:fs',
      label: 'clear filesystem',
      callback: function (data) {

        return habemus.services.dialogs.confirm('This action cannot be undoned. Are you sure?', {
          ok: 'yes',
        })
        .then(function () {
          return habemus.services.hDev.readDirectory('/');
        })
        .then(function (rootEntries) {
          return Bluebird.all(rootEntries.map(function (entry) {
            return habemus.services.hDev.remove(entry.path);
          }));
        })
        .catch(function (err) {
          // user cancelled
        })

      },
    },

    {
      group: 'sw:fs',
      label: 'download zip',
      callback: function (data) {

        return habemus.services.dialogs.prompt('Save as', {
          submit: 'download',
          defaultValue: 'web-editor-projects.zip',
        })
        .then(function (downloadName) {

          return habemus.services.zip.zip('/').then(function (zipFile) {
            fileSaver.saveAs(zipFile, downloadName);
          });
        })
        .catch(function (err) {
          if (err.canceled) {
            // user canceled
            return;
          }

          habemus.services.dialogs.alert('Error downloading zip file');
          console.warn(err);
        });
      },
    }
  ]);

};
