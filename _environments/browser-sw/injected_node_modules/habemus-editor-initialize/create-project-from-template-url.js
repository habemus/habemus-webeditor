// native
const url = require('url');

// third-party
const Bluebird = require('bluebird');

function parseTemplateURL() {
  var parsedURL = url.parse(window.location.toString(), true);

  return parsedURL.query.template_url || false;
}

function clearTemplateURL() {
  var parsedURL = url.parse(window.location.toString(), true);

  delete parsedURL.search;
  delete parsedURL.query.template_url;
  
  // remove the demo data from the url
  window.history.replaceState(
    'habemus-editor',
    'habemus-editor',
    url.format(parsedURL)
  );
}

module.exports = function (habemus, options) {

  var templateURL = parseTemplateURL();

  if (templateURL) {
    // check if there are files in the filesystem
    return habemus.services.hDev.readDirectory('/').then(function (results) {

      if (results.length > 0) {
        // project is not empty.
        // ask user to confirm deleting all files
        return habemus.services.dialogs.confirm('Downloading a new project will require deleting all files of the current project. Are sure?', {
          confirm: 'replace all files',
          cancel: 'cancel',
        });
      }
    })
    .then(function () {
      return habemus.services.hDev.readDirectory('/').then(function (rootEntries) {
        return Bluebird.all(rootEntries.map(function (entry) {
          return habemus.services.hDev.remove(entry.path);
        }));
      });
    })
    .then(function () {
      return habemus.services.zip.unzip(templateURL);
    })
    .then(function () {
      // clear the templateURL from the query string only after success
      clearTemplateURL();
    })
    .catch(function (err) {
      if (err.canceled) {
        // user canceled, ignore
        clearTemplateURL();
        return;
      }

      habemus.services.dialogs.alert('An unknown error happened, please retry');
      console.warn(err);
      throw err;
    });

  } else {
    return Bluebird.resolve();
  }

};
