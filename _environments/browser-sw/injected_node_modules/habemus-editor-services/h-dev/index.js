// native


// third-party
const Bluebird = require('bluebird');
const Intercomm = require('intercomm');

// injected
const habemusEditorUrls = require('habemus-editor-urls');

const EDITOR_UI_ID = 'editor-ui';

module.exports = function (habemus, options) {

  const projectId = habemus.services.config.projectId;

  var hFsIntercomm = new Intercomm({
    // TODO: GENERATE UNIQUE ID
    id: EDITOR_UI_ID,
    type: 'client',
    apiVersion: '0.0.0',
    sendMessage: function (message) {
      habemus.services.serviceWorker.controller.postMessage(message.toJSON());
    }
  });
  
  // Set up a listener for messages posted from the service worker.
  habemus.services.serviceWorker.addEventListener('message', function (event) {
    // console.log('received message from service worker', event);
    var data = event.data;
    
    if (data.to === EDITOR_UI_ID) {
      hFsIntercomm.handleMessage(data);
    } else if (data.type === 'event') {
      hFsIntercomm.handleMessage(data);
    } else {
      console.warn('ignoring message on editor-ui', event);
    }
    
  });

  return new Bluebird(function (resolve, reject) {
    /**
     * TEMPORARY
     */
    var hDev = {};

    hDev.projectRootURL = habemusEditorUrls.format.workspacePreview(projectId);

    // functions
    hDev.pathExists = function (path) {
      // console.log('pathExists', path);
      return hFsIntercomm.exec('local-h-fs', 'pathExists', [path]);
    };

    hDev.remove = function (path) {
      // console.log('remove', path);
      return hFsIntercomm.exec('local-h-fs', 'remove', [path]);
    };

    hDev.move = function (fromPath, toPath) {
      // console.log('move', arguments);
      return hFsIntercomm.exec('local-h-fs', 'move', [fromPath, toPath]);
    };

    hDev.createFile = function (filepath, contents) {
      // console.log('createFile', arguments);
      return hFsIntercomm.exec('local-h-fs', 'createFile', [filepath, contents]);
    };
    hDev.readFile = function (filepath) {
      // console.log('readFile', arguments);
      return hFsIntercomm.exec('local-h-fs', 'readFile', [filepath]);
    };
    hDev.updateFile = function (filepath, contents) {
      // console.log('updateFile', arguments);
      return hFsIntercomm.exec('local-h-fs', 'updateFile', [filepath, contents]);
    };

    hDev.readDirectory = function (dirpath) {
      // console.log('readDirectory', arguments);
      return hFsIntercomm.exec('local-h-fs', 'readDirectory', [dirpath]);
    };
    hDev.createDirectory = function (dirpath) {
      // console.log('createDirectory', arguments);
      return hFsIntercomm.exec('local-h-fs', 'createDirectory', [dirpath]);
    };

    hDev.subscribe = function (eventName, callback) {
      // console.log('subscribe', arguments);
      hFsIntercomm.on(eventName, callback);
      return Bluebird.resolve();
    };
    hDev.publish = function (eventName, data) {
      // console.log('publish', arguments);
      return hFsIntercomm.publish(eventName, data);
    };

    hDev.startWatching = function () {
      // console.log('startWatching', arguments);
      return Bluebird.resolve();
    };

    hDev.stopWatching = function () {
      // console.log('stopWatching', arguments);
      return Bluebird.resolve();
    };

    resolve(hDev);
  });

};
