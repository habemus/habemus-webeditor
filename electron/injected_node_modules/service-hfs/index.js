// native dependencies
const fs   = require('fs');
const path = require('path');

// third-party dependencies
const fse        = require('fs-extra');
const Bluebird   = require('bluebird');

// promisify some methods
const _writeFile = Bluebird.promisify(fs.writeFile);
const _mkdir     = Bluebird.promisify(fs.mkdir);
const _readdir   = Bluebird.promisify(fs.readdir);
const _readFile  = Bluebird.promisify(fs.readFile);
const _lstat     = Bluebird.promisify(fs.lstat);
const _move      = Bluebird.promisify(fse.move);
const _remove    = Bluebird.promisify(fse.remove);

// constants
const FS_ROOT_PATH = process.cwd();

module.exports = function (options) {

  const hfs = {
    readDirectory: function (p) {
      // build the real path
      p = path.join(FS_ROOT_PATH, p);

      // simulate very bad connection
      return _readdir(p).then((contents) => {
        return Bluebird.all(contents.map((contentName) => {

          var contentPath = path.join(p, contentName);

          return _lstat(contentPath)
            .then((stat) => {

              // process the stat object before returning
              stat.basename = contentName;

              return stat;
            });
        }));
      });
    },

    remove: function (p) {
      p = path.join(FS_ROOT_PATH, p);

      return _remove(p);
    },

    writeFile: function (p, contents) {
      p = path.join(FS_ROOT_PATH, p);

      // console.log('create file ', p, ' with contents ', contents);

      return _writeFile(p, contents);
    },

    move: function (src, dest) {
      src = path.join(FS_ROOT_PATH, src);
      dest = path.join(FS_ROOT_PATH, dest);

      return _move(src, dest);
    },

    readFile: function (p, options) {
      p = path.join(FS_ROOT_PATH, p);

      return _readFile(p, options);
    },

    publish: function (eventName, eventData) {
      // console.log('event ', eventName, eventData);
    },
    

    createDirectory: function (p) {
      p = path.join(FS_ROOT_PATH, p);
  
      return _mkdir(p);
    },


    createFile: function (p) {
      p = path.join(FS_ROOT_PATH, p);

      return _lstat(p)
        .then(function (stats) {
          // stats exist, throw error
          return Bluebird.reject('file exists');
        })
        .catch(function (err) {
          // stats do not exist, create file
          return _writeFile(p, '');
        });
    },
  };

  return Bluebird.resolve(hfs);
}